// 980. Unique Paths III
// https://leetcode.com/problems/unique-paths-iii/description/

class Solution 
{
    int dir[][] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int n;
    int m;
    private int solve(int sr, int sc, int emptyCells, int grid[][], boolean vis[][])
    {
        if(sr >= n || sr < 0 || sc >= m || sc < 0 || grid[sr][sc] == -1 || vis[sr][sc] == true) 
            return 0;
        if(grid[sr][sc] == 2)
        {
            if(emptyCells == 0) return 1;
            return 0;
        }

        int sum = 0;
        vis[sr][sc] = true;
        emptyCells--;
        for(int i = 0; i < 4; i++)
        {
            int nr = sr + dir[i][0];
            int nc = sc + dir[i][1];
            sum += solve(nr, nc, emptyCells, grid, vis);
        }
        vis[sr][sc] = false;
        emptyCells++;
        return sum;
    }
    public int uniquePathsIII(int[][] grid) 
    {
        n = grid.length;
        m = grid[0].length;
        int sr = -1; // starting row
        int sc = -1; // starting col
        int emptyCells = 0; // no. of empty cells
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1)
                {
                    sr = i;
                    sc = j;
                }
                if(grid[i][j] == 0) emptyCells++; 
            }
        }
        boolean vis[][] = new boolean[n][m];
        // we will count start point is also in the path so consider as blank cell 
        // hence emptyCells + 1
        return solve(sr, sc, emptyCells + 1, grid, vis);
    }
}
