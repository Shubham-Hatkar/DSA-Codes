// 46. Permutations
// https://leetcode.com/problems/permutations/description/


class Solution 
{
    private void solve(int arr[], List<Integer> path, List<List<Integer>> ans, boolean vis[])
    {
        if(path.size() == arr.length)
        {
            List<Integer> temp = new ArrayList<>(path);
            ans.add(temp);
            return;
        }

        for(int i = 0; i < arr.length; i++)
        {
            if(vis[i] == false)
            {
                vis[i] = true;
                path.add(arr[i]);
                solve(arr, path, ans, vis);
                vis[i] = false;
                path.remove(path.size()-1);
            }
        }

    }
    public List<List<Integer>> permute(int[] nums) 
    {
        int n = nums.length;
        boolean vis[] = new boolean[n];

        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        solve(nums, path, ans, vis);
        return ans;
    }
}
