// 37. Sudoku Solver
// https://leetcode.com/problems/sudoku-solver/description/

class Solution 
{
    private boolean canPlace(int row, int col, int num, char[][] board)
    {
        // check for row
        for(int i = 0; i < 9; i++)
        {
            if(board[row][i] - '0' == num) return false;
        }

        // check for col
        for(int i = 0; i < 9; i++)
        {
            if(board[i][col] - '0' == num) return false;
        }

        // check for submatrix
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for(int i = startRow; i < startRow + 3; i++)
        {
            for(int j = startCol; j < startCol + 3; j++)
            {
                if(board[i][j] -'0' == num) return false;
            }
        }

        return true;
    }
    private boolean solve(int idx, ArrayList<int[]> points, char board[][])
    {
        // if we successfully filled all board.
        if(idx == points.size()) return true;
    
        // get the empty place.
        int index[] = points.get(idx);
        int row = index[0];
        int col = index[1];

        // try to place num at empty place from 1 to 9
        for(int i = 1; i <= 9; i++)
        {
            // check if we can place num with satisfying conditions.
            if(canPlace(row, col, i, board))
            {
                board[row][col] = (char)(i + '0');
                boolean ans = solve(idx + 1, points, board);
                if(ans == true) return true;
                board[row][col] = '.'; // backtrack
            }
        }
        return false;
    }
    public void solveSudoku(char[][] board) 
    {
        ArrayList<int[]> points = new ArrayList<>();
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] == '.') points.add(new int[]{i,j});
            }
        }
        solve(0, points, board);
    }
}
