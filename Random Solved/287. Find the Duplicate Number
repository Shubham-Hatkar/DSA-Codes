// 287. Find the Duplicate Number
// https://leetcode.com/problems/find-the-duplicate-number/description/

********************* TC -> O(N) & SC -> O(N) ******************************

class Solution
 {
    public int findDuplicate(int[] nums) 
    {
        Map<Integer,Integer> hm = new HashMap<>();
        for(int i=0; i<nums.length; i++) hm.put(nums[i],hm.getOrDefault(nums[i],0)+1);
        for(Integer key : hm.keySet()) if(hm.get(key)!=1) return key; 
        return -1;
    }
}


############################## OPTIMAL ####################################
********************* TC -> O(N) & SC -> O(1) ******************************
class Solution 
{
    public int findDuplicate(int[] nums) 
    {
        int n = nums.length;
        int i = 0;
        while(i < n)
        {
            int curr = nums[i];
            if(curr >= 1 && curr <= n)
            {
                if(nums[i] != nums[curr-1])
                {
                    int temp = nums[i];
                    nums[i] = nums[curr-1];
                    nums[curr-1] = temp;
                }
                else i++;
            }
            else i++;
        }

        for(int j = 0; j < n; j++)
        {
            if(nums[j] != j + 1) return nums[j];
        }

        return -1;
    }
}
