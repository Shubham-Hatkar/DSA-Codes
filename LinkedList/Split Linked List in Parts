// 725. Split Linked List in Parts
// https://leetcode.com/problems/split-linked-list-in-parts/description/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    private int getSize(ListNode head)
    {
        int len = 0;
        ListNode curr = head;
        while(curr != null)
        {
            len++;
            curr = curr.next;
        }
        return len;
    }
    public ListNode[] splitListToParts(ListNode head, int k) 
    {
        ListNode ans[] = new ListNode[k];
        if(head == null)
        {
            for(int i = 0; i < k; i++)
            {
                ans[i] = null;
            }
            return ans;
        }

        int size = getSize(head);
        
        if(size < k)
        {
            ListNode curr = head;
            while(curr.next != null)
            {
                curr = curr.next;
            }
            while(size < k)
            {
                curr.next = new ListNode(-1);
                curr = curr.next;
                size++;
            }
        }

        int rem = size % k;
        int parts = size / k;
        
        ListNode curr = head;
        int idx = 0;
        while(curr != null)
        {
            ListNode ptr = curr;
            ans[idx] = (ptr.val == -1) ? null : ptr;
            idx++;

            int moves = parts;
            for(int i = 1; i < moves; i++) ptr = ptr.next;
            if(rem > 0)
            {
                ptr = ptr.next;
                rem--;
            }
            ListNode nextOfptr = ptr.next;
            ptr.next = null;
            curr = nextOfptr;
        }

        return ans;
    }
}
