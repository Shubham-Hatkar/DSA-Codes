// 295. Find Median from Data Stream
// https://leetcode.com/problems/find-median-from-data-stream/description/

class MedianFinder 
{
    PriorityQueue<Integer> left;
    PriorityQueue<Integer> right;
    public MedianFinder() 
    {
        left = new PriorityQueue<>(Collections.reverseOrder());
        right = new PriorityQueue<>();
    }
    
    public void addNum(int num) 
    {
        if(left.size() == 0 || num <= left.peek()) left.add(num);
        else right.add(num);

        int ls = left.size();
        int rs = right.size();

        if(ls - rs == 2) right.add(left.remove()); // we can keep till -> ls = rs + 1
        else if(rs > ls) left.add(right.remove()); // if rs is greater than ls
         
    }
    
    public double findMedian() 
    {
        if(left.size() == right.size()) 
        {
            return (((left.peek() * 1.0) + (right.peek() * 1.0)) / 2.0); // Convert in Double
        }
        else return left.peek() * 1.0; // convert in double
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
