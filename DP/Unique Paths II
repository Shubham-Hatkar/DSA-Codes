// 63. Unique Paths II
// https://leetcode.com/problems/unique-paths-ii/description/

class Solution 
{
    private int memo(int sr, int sc, int grid[][], int dp[][])
    {
        if(sr < 0 || sc < 0) return 0;
        if(grid[sr][sc] == 1) return 0;
        if(sr == 0 && sc == 0) return 1;
        if(dp[sr][sc] != -1) return dp[sr][sc];

        int right = memo(sr,  sc - 1, grid, dp);
        int down = memo(sr - 1, sc, grid, dp);
        dp[sr][sc] = right + down;
        return dp[sr][sc];
    }
    public int uniquePathsWithObstacles(int[][] grid) 
    {
        int n = grid.length;
        int m = grid[0].length;
        int dp[][] = new int[n][m];
        for(int row[] : dp) Arrays.fill(row, -1);
        return memo(n - 1, m - 1, grid, dp);
    }
}
