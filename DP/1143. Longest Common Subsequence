1143. Longest Common Subsequence
https://leetcode.com/problems/longest-common-subsequence/description/


class Solution 
{
    private int LCS(int i, int j, String s, String t, int dp[][])
    {
        if(i < 0 || j < 0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        if(s.charAt(i) == t.charAt(j)) 
            return dp[i][j] = 1 + LCS(i - 1, j - 1, s, t, dp);

        return dp[i][j] = Math.max(LCS(i - 1, j, s, t, dp), LCS(i, j - 1, s, t, dp));
    }
    public int longestCommonSubsequence(String s, String t) 
    {
        int n = s.length();
        int m = t.length();

        int dp[][] = new int[n][m];
        for(int row[] : dp)
        {
            Arrays.fill(row, -1);
        }

        return LCS(n - 1, m - 1, s, t, dp);
    }
}
