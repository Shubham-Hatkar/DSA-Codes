// 120. Triangle
// https://leetcode.com/problems/triangle/description/

class Solution 
{
    private int solve(int idx, int row, List<List<Integer>> triangle, int dp[][])
    {
        if(row == triangle.size() - 1)
        {
            return triangle.get(row).get(idx);
        }
        if(dp[row][idx] != -1) return dp[row][idx];
        int withCurrIdx = solve(idx, row + 1, triangle, dp);
        int withNextIdx = solve(idx + 1, row + 1, triangle, dp);
        dp[row][idx] = Math.min(withCurrIdx, withNextIdx) + triangle.get(row).get(idx);
        return dp[row][idx];
    }
    public int minimumTotal(List<List<Integer>> triangle) 
    {
        int row = triangle.size(); // Number of rows given
        int lastRowSize = triangle.get(row - 1).size(); // last row size
        int dp[][] = new int[row][lastRowSize];
        for(int r[] : dp) Arrays.fill(r, -1);
        return solve(0, 0, triangle, dp);
    }
}
