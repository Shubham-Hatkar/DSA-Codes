// 516. Longest Palindromic Subsequence
// https://leetcode.com/problems/longest-palindromic-subsequence/description/

class Solution 
{
    private String reverse(String s)
    {
        char arr[] = s.toCharArray();
        int i = 0;
        int j = arr.length - 1;
        while(i < j)
        {
            char temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
        return new String(arr);
    }
    private int LCS(int i, int j, String s, String t, int dp[][])
    {
        if(i < 0 || j < 0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        if(s.charAt(i) == t.charAt(j)) 
            return dp[i][j] = 1 + LCS(i - 1, j - 1, s, t, dp);

        return dp[i][j] = Math.max(LCS(i - 1, j, s, t, dp), LCS(i, j - 1, s, t, dp));
    }
    public int longestPalindromeSubseq(String s) 
    {
        // Apply the logic of LCS
        int n = s.length();
        String t = reverse(s);

        int dp[][] = new int[n][n];
        for(int row[] : dp)
        {
            Arrays.fill(row, -1);
        }
        return LCS(n - 1, n - 1, s, t, dp);
    }
}
