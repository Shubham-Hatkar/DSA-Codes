// 1319. Number of Operations to Make Network Connected
// https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/


class Solution 
{
    private void dfs(int src, ArrayList<Integer>[] graph, boolean vis[])
    {
        if(vis[src] == true) return;
        vis[src] = true;
        for(int nbr : graph[src])
        {
            if(vis[nbr] == false)
            {
                dfs(nbr, graph, vis);
            }
        }
    }
    public int makeConnected(int n, int[][] connections) 
    {
        if(connections.length < n - 1) return -1;

        ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i = 0; i < n; i++) graph[i] = new ArrayList<>();

        for(int e[] : connections)
        {
            int u = e[0];
            int v = e[1];
            graph[u].add(v);
            graph[v].add(u);
        }

        int component = 0;
        boolean vis[] = new boolean[n];
        for(int i = 0; i < n; i++)
        {
            if(vis[i] == false)
            {
                component++;
                dfs(i, graph, vis);
            }
        }
        return component - 1;
    }
}
