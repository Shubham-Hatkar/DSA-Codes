// 1123. Lowest Common Ancestor of Deepest Leaves
// https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair
{
    TreeNode node;
    int depth;
    Pair(TreeNode node, int depth)
    {
        this.node = node;
        this.depth = depth;
    }
}
class Solution 
{
    private Pair solve(TreeNode root, int currDepth)
    {
        if(root == null) return new Pair(null, currDepth);
        Pair left = solve(root.left, currDepth + 1);
        Pair right = solve(root.right, currDepth + 1);
        if(left.depth == right.depth) return new Pair(root, left.depth);
        return (left.depth > right.depth) ? left : right; 
    }
    public TreeNode lcaDeepestLeaves(TreeNode root)
    {
        Pair p = solve(root, 0);
        return p.node;
    }
}
