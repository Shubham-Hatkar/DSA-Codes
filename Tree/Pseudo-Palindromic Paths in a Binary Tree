// 1457. Pseudo-Palindromic Paths in a Binary Tree
// https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    int count;
    private boolean isPalindrome(int arr[])
    {
        int odds = 0;
        for(int i = 0; i < arr.length; i++)
        {
            if(arr[i] % 2 == 1) odds++;
            if(odds > 1) return false;
        }
        return true;
    }
    private void solve(TreeNode root, int freq[])
    {
        if(root == null) return;

        // If we are at leaf node
        if(root.left == null && root.right == null)
        {
            freq[root.val]++;
            if(isPalindrome(freq)) count++;
            freq[root.val]--;
        }

        freq[root.val]++; // Increment freq
        solve(root.left, freq);
        solve(root.right, freq);
        freq[root.val]--; // Back Track
    }
    public int pseudoPalindromicPaths (TreeNode root) 
    {
        count = 0;
        int freq[] = new int[10]; // Digits -> 1 to 9
        solve(root, freq);
        return count;
    }
}



