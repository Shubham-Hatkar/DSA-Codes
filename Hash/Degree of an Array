// 697. Degree of an Array
// https://leetcode.com/problems/degree-of-an-array/description/

class Solution 
{
    public int findShortestSubArray(int[] nums) 
    {
        HashMap<Integer, int[]> hm = new HashMap<>();
        for(int i = 0; i < nums.length; i++)
        {
            if(hm.containsKey(nums[i]))
            {
                int temp[] = hm.get(nums[i]);
                temp[1] = i;
                temp[2] = temp[2] + 1;
                hm.put(nums[i], temp);
            }
            else
            {
                int temp[] = new int[3];
                temp[1] = i;
                temp[0] = i;
                temp[2] = 1;
                hm.put(nums[i], temp);
            }
        }
        
        int ans = 0;
        int maxFreq = Integer.MIN_VALUE;
        for(int key : hm.keySet())
        {
            if(hm.get(key)[2] >= maxFreq)
            {
                int index[] = hm.get(key);
                int size = index[1] - index[0] + 1;
                System.out.println(key + " " + index[1] + " " + index[0]);
                if(hm.get(key)[2] == maxFreq)
                {
                    ans = Math.min(ans, size);
                }
                else if(size > 0) ans = size;
                
                maxFreq = hm.get(key)[2];
            }
        }
        return ans;
    }
}
